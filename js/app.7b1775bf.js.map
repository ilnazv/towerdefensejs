{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/game/Components/Towers/Models.ts","webpack:///./src/game/Models.ts","webpack:///./src/game/Constants.ts","webpack:///./src/game/Components/Towers/Towers.ts","webpack:///./src/game/Utils.ts","webpack:///./src/game/Components/Canvas.ts","webpack:///./src/game/Components/CommandBar.ts","webpack:///./src/game/Components/BasicElements/Button.ts","webpack:///./src/game/Components/Projectile.ts","webpack:///./src/game/Components/Enemies/Enemy.ts","webpack:///./src/game/Game.ts","webpack:///./src/game/Components/Path.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TowerType","PointHelper","point","rectCenter","size","xInside","x","width","yInside","y","circleCenter","radius","Math","sqrt","ElelementsIds","logsElId","toggleLogsButtonId","canvasId","position","blockSize","color","this","leftTopX","leftTopY","ctx","Error","type","level","SpearTower","towerParams","damageStart","damageEnd","attackRange","attackSpeed","SplashTower","getTowerParams","params","super","attackCounter","min","max","random","isPointInPath","path","save","beginPath","fillStyle","Path2D","arc","fill","closePath","drawAttackRange","restore","setLineDash","stroke","enemies","index","length","enemy","dead","pointInsideCircle","shootAt","damage","document","getElementById","htmlCanvas","emptyColor","items","_dragNDropDisabled","addEventListener","ev","handleMousedown","handleTouchstart","handleMousemove","handleTouchmove","handleMouseup","handleTouchend","handleMouseClicks","setSize","height","offsetX","offsetY","dragItem","undefined","filter","pointInPath","find","touchPoint","touches","pageX","offsetLeft","pageY","offsetTop","msg","JSON","stringify","innerHTML","handleOnClick","coords","moveTo","update","_ev","window","innerWidth","innerHeight","getContext","push","includes","clearRect","draw","onClickHandler","forEach","CommandBar","canvasSize","barHeight","fillRect","drawMenuItems","Button","text","onClick","buttonHeight","buttonWidth","radgrad","createRadialGradient","addColorStop","rect","font","textAlign","textBaseline","fillText","Projectile","dmg","target","progress","speed","targetPosition","dx","dy","X","Y","round","moveSpeed","points","_dead","_healthPoints","projectiles","towerPosition","reachedProjectiles","moveForward","doDamage","nextPoint","getPointAtPercent","defaultPath","percentPathMap","Map","calculateSections","prevPoint","start","abs","set","end","percent","step","sectionKey","keys","section","sectionPercent","lineCap","lineTo","drawStartEnd","defaultTowers","createTower","gameCanvas","towers","fps","lifes","waves","enemiesColor","enemiesMoveSpeed","enemiesNumber","spawnSpeed","gameIsRunning","canvas","bottomRightButton","commandBar","add","showMainMenu","startButton","remove","intervalId","setInterval","run","startLevel","startEnemiesSpawn","nextLevelButton","playAgainMenu","initialize","console","log","enemiesCounter","levelConfigs","spawnEnemy","newEnemy","Promise","resolve","reject","enemySpawnInterval","clearInterval","stop","gameOverMenu","attack","toggleLogsButton","toggleAttribute"],"mappings":"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","file":"js/app.7b1775bf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { IDrawable, IClickable } from '../../Models';\r\nimport { Enemy } from '../Enemies/Enemy';\r\n\r\nexport interface ITower extends IDrawable, IClickable {\r\n    attack(enemies: Enemy[]): void;\r\n}\r\n\r\nexport interface ITowerParams {\r\n    damageStart: number;\r\n    damageEnd: number;\r\n    attackRange: number;\r\n    attackSpeed: number;\r\n}\r\n\r\nexport enum TowerType {\r\n    SpearTower = 'SpearTower',\r\n    SplashTower = 'SplashTower',\r\n}\r\n","export interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class PointHelper {\r\n    static pointInsideRect(\r\n        point: IPoint,\r\n        rectCenter: IPoint,\r\n        size: ISize\r\n    ): boolean {\r\n        const xInside =\r\n            point.x >= rectCenter.x - size.width / 2 &&\r\n            point.x <= rectCenter.x + size.width / 2;\r\n        const yInside =\r\n            point.y >= rectCenter.y - size.width / 2 &&\r\n            point.y <= rectCenter.y + size.width / 2;\r\n        return xInside && yInside;\r\n    }\r\n\r\n    static pointInsideCircle(\r\n        point: IPoint,\r\n        circleCenter: IPoint,\r\n        radius: number\r\n    ): boolean {\r\n        return (\r\n            Math.sqrt(\r\n                (point.x - circleCenter.x) ** 2 +\r\n                    (point.y - circleCenter.y) ** 2\r\n            ) < radius\r\n        );\r\n    }\r\n}\r\n\r\nexport interface IDrawable {\r\n    draw(ctx: CanvasRenderingContext2D, color?: string): void;\r\n}\r\n\r\nexport interface IClickable {\r\n    onClickHandler(ctx: CanvasRenderingContext2D, point: IPoint): void;\r\n    pointInPath(ctx: CanvasRenderingContext2D, point: IPoint): boolean;\r\n}\r\n\r\nexport function getRandomArbitrary(min: number, max: number): number {\r\n    return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport interface ISize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface IWaveSettings {\r\n    enemiesNumber: number;\r\n    enemiesMoveSpeed: number;\r\n    enemiesColor: string;\r\n    spawnSpeed: number;\r\n}\r\n","export const defaultBlockSize = 10;\r\nexport class ElelementsIds {\r\n    static logsElId = 'logs';\r\n    static toggleLogsButtonId = 'toggleLogs';\r\n    static canvasId = 'gameCanvas';\r\n}\r\n","import { TowerType, ITowerParams, ITower } from './Models';\r\nimport {\r\n    IDrawable,\r\n    IPoint,\r\n    getRandomArbitrary,\r\n    PointHelper,\r\n} from '../../Models';\r\nimport { defaultBlockSize } from '../../Constants';\r\nimport { Enemy } from '../Enemies/Enemy';\r\n\r\nexport class Item implements IDrawable {\r\n    constructor(\r\n        public position: IPoint,\r\n        private blockSize = defaultBlockSize,\r\n        public color = 'black'\r\n    ) {}\r\n\r\n    get x(): number {\r\n        return this.position.x;\r\n    }\r\n\r\n    get y(): number {\r\n        return this.position.y;\r\n    }\r\n\r\n    get leftTopX(): number {\r\n        return this.position.x - this.blockSize / 2;\r\n    }\r\n\r\n    get leftTopY(): number {\r\n        return this.position.y - this.blockSize / 2;\r\n    }\r\n\r\n    get leftTop(): IPoint {\r\n        return {\r\n            x: this.leftTopX,\r\n            y: this.leftTopY,\r\n        };\r\n    }\r\n\r\n    get width(): number {\r\n        return this.blockSize;\r\n    }\r\n\r\n    get height(): number {\r\n        return this.blockSize;\r\n    }\r\n\r\n    public moveTo(point: IPoint) {\r\n        this.position = point;\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, color = this.color): void {\r\n        throw new Error('not implemented');\r\n    }\r\n}\r\n\r\nexport const getTowerParams = (\r\n    type: TowerType,\r\n    level: number\r\n): ITowerParams => {\r\n    switch (type) {\r\n        case TowerType.SpearTower:\r\n            return {\r\n                damageStart: 45,\r\n                damageEnd: 65,\r\n                attackRange: 100,\r\n                attackSpeed: 5,\r\n            };\r\n        case TowerType.SplashTower:\r\n            return {\r\n                damageStart: 20,\r\n                damageEnd: 40,\r\n                attackRange: 50,\r\n                attackSpeed: 2,\r\n            };\r\n    }\r\n};\r\n\r\nexport class TowerFactory {\r\n    static createTower(\r\n        position: IPoint,\r\n        type: TowerType,\r\n        level: number\r\n    ): ITower {\r\n        switch (type) {\r\n            case TowerType.SpearTower:\r\n                const towerParams = getTowerParams(type, level);\r\n                return new SpearTowerBase(position, towerParams);\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport class SpearTowerBase extends Item implements ITower {\r\n    public damageStart = 45;\r\n    public damageEnd = 65;\r\n    public attackRange = 100;\r\n    public attackSpeed = 5;\r\n    private attackCounter = 100;\r\n\r\n    private get damage(): number {\r\n        return getRandomArbitrary(this.damageStart, this.damageEnd);\r\n    }\r\n\r\n    private path: Path2D;\r\n\r\n    constructor(\r\n        position: IPoint,\r\n        params: ITowerParams,\r\n        blockSize = defaultBlockSize,\r\n        color = 'blue'\r\n    ) {\r\n        super(position, blockSize, color);\r\n        const { attackRange, attackSpeed, damageEnd, damageStart } = params;\r\n        this.damageStart = damageStart;\r\n        this.damageEnd = damageEnd;\r\n        this.attackRange = attackRange;\r\n        this.attackSpeed = attackSpeed;\r\n    }\r\n    onClickHandler(ctx: CanvasRenderingContext2D, point: IPoint): void {\r\n        return;\r\n    }\r\n    pointInPath(ctx: CanvasRenderingContext2D, point: IPoint): boolean {\r\n        return ctx.isPointInPath(this.path, point.x, point.y);\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, color = this.color): void {\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        this.path = new Path2D();\r\n        this.path.arc(this.leftTopX, this.leftTopY, this.width, 0, 360);\r\n        ctx.fill(this.path);\r\n        ctx.closePath();\r\n        this.drawAttackRange(ctx);\r\n        ctx.restore();\r\n    }\r\n\r\n    private drawAttackRange(ctx: CanvasRenderingContext2D): void {\r\n        ctx.beginPath();\r\n        ctx.setLineDash([5, 15]);\r\n        ctx.fillStyle = 'gray';\r\n        ctx.arc(this.leftTopX, this.leftTopY, this.attackRange, 0, 360);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    public attack(enemies: Enemy[]): void {\r\n        if (this.attackCounter <= 100) {\r\n            this.attackCounter += this.attackSpeed;\r\n            return;\r\n        }\r\n        for (let index = 0; index < enemies.length; index++) {\r\n            const enemy = enemies[index];\r\n            if (\r\n                !enemy.dead &&\r\n                PointHelper.pointInsideCircle(\r\n                    enemy,\r\n                    this.position,\r\n                    this.attackRange\r\n                )\r\n            ) {\r\n                enemy.shootAt(this.damage, this.position);\r\n                // console.log('enemy hp:', enemy.hp);\r\n                this.attackCounter = 0;\r\n                return;\r\n            }\r\n        }\r\n        this.attackCounter = 0;\r\n    }\r\n}\r\n","import { ElelementsIds } from './Constants';\r\n\r\nconst logsEl = document.getElementById(ElelementsIds.logsElId);\r\n\r\nexport const log = (msg: string): void => {\r\n    if (logsEl) {\r\n        logsEl.innerHTML = msg + '\\n' + logsEl.innerHTML;\r\n    }\r\n};\r\n","import { IDrawable, IPoint, ISize, IClickable } from '../Models';\r\nimport { Item } from './Towers/Towers';\r\nimport { ITower } from './Towers/Models';\r\nimport { log } from '../Utils';\r\n\r\nexport class Canvas {\r\n    public emptyColor = 'white';\r\n    private items: IDrawable[] = [];\r\n\r\n    private dragItem: Item;\r\n\r\n    private _dragNDropDisabled = false;\r\n\r\n    public DisableDragNDrop(): void {\r\n        this._dragNDropDisabled = true;\r\n    }\r\n\r\n    public EnabledDragNDrop(): void {\r\n        this._dragNDropDisabled = false;\r\n    }\r\n\r\n    private handleMousedown(ev: MouseEvent): void {\r\n        const point: IPoint = {\r\n            x: ev.offsetX,\r\n            y: ev.offsetY,\r\n        };\r\n        this.dragItem = this._dragNDropDisabled ? undefined : this.items\r\n            .filter((x) => ((x as unknown) as ITower).pointInPath)\r\n            .find((x) =>\r\n                ((x as unknown) as ITower).pointInPath(this.ctx, point)\r\n            ) as Item;\r\n    }\r\n\r\n    private handleTouchstart(ev: TouchEvent): void {\r\n        const touchPoint = ev.touches.length && ev.touches[0];\r\n        const point: IPoint = {\r\n            x: touchPoint.pageX - this.htmlCanvas.offsetLeft,\r\n            y: touchPoint.pageY - this.htmlCanvas.offsetTop,\r\n        };\r\n        log(`handleTouchstart: ${JSON.stringify(point)}`);\r\n        this.handleOnClick(point);\r\n        this.dragItem = this.items\r\n            .filter((x) => ((x as unknown) as ITower).pointInPath)\r\n            .find((x) =>\r\n                ((x as unknown) as ITower).pointInPath(this.ctx, point)\r\n            ) as Item;\r\n    }\r\n\r\n    private handleMousemove(ev: MouseEvent): void {\r\n        const coords: IPoint = {\r\n            x: ev.offsetX,\r\n            y: ev.offsetY,\r\n        };\r\n        if (this.dragItem) {\r\n            this.dragItem.moveTo(coords);\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    private handleTouchmove(ev: TouchEvent): void {\r\n        const touchPoint = ev.touches.length && ev.touches[0];\r\n        const coords: IPoint = {\r\n            x: touchPoint.pageX - this.htmlCanvas.offsetLeft,\r\n            y: touchPoint.pageY - this.htmlCanvas.offsetTop,\r\n        };\r\n        if (this.dragItem) {\r\n            this.dragItem.moveTo(coords);\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    private handleMouseup(_ev: MouseEvent): void {\r\n        this.dragItem = undefined;\r\n    }\r\n\r\n    private handleTouchend(_ev: TouchEvent): void {\r\n        this.dragItem = undefined;\r\n    }\r\n\r\n    private handleMouseClicks(ev: MouseEvent): void {\r\n        this.handleOnClick({\r\n            x: ev.offsetX,\r\n            y: ev.offsetY,\r\n        });\r\n    }\r\n\r\n    private setSize({ width, height }: ISize = { width: window.innerWidth, height: window.innerHeight }): void {\r\n        this.htmlCanvas.width = width;\r\n        this.htmlCanvas.height = height;\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return {\r\n            height: this.htmlCanvas.height,\r\n            width: this.htmlCanvas.width,\r\n        };\r\n    }\r\n\r\n    constructor(private htmlCanvas: HTMLCanvasElement) {\r\n        htmlCanvas.addEventListener('mousedown', (ev) =>\r\n            this.handleMousedown(ev)\r\n        );\r\n        htmlCanvas.addEventListener('touchstart', (ev) =>\r\n            this.handleTouchstart(ev)\r\n        );\r\n        htmlCanvas.addEventListener('mousemove', (ev) =>\r\n            this.handleMousemove(ev)\r\n        );\r\n        htmlCanvas.addEventListener('touchmove', (ev) =>\r\n            this.handleTouchmove(ev)\r\n        );\r\n        htmlCanvas.addEventListener('mouseup', (ev) =>\r\n            this.handleMouseup(ev as MouseEvent)\r\n        );\r\n        htmlCanvas.addEventListener('touchend', (ev) =>\r\n            this.handleTouchend(ev)\r\n        );\r\n        htmlCanvas.addEventListener('click', (ev) =>\r\n            this.handleMouseClicks(ev)\r\n        );\r\n        this.setSize({\r\n            height: 400,\r\n            width: 600\r\n        });\r\n    }\r\n\r\n    private get ctx(): CanvasRenderingContext2D {\r\n        return this.htmlCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n    }\r\n\r\n    public add(...items: IDrawable[]): void {\r\n        this.items.push(...items);\r\n    }\r\n\r\n    public remove(...items: IDrawable[]): void {\r\n        this.items = this.items.filter((x) => !items.includes(x));\r\n    }\r\n\r\n    public update(): void {\r\n        this.ctx.fillStyle = this.emptyColor;\r\n        this.ctx.clearRect(0, 0, this.size.width, this.size.height);\r\n        for (let index = 0; index < this.items.length; index++) {\r\n            const item = this.items[index];\r\n            item.draw(this.ctx);\r\n        }\r\n    }\r\n\r\n    public handleOnClick(point: IPoint): void {\r\n        this.items\r\n            .filter((x) => ((x as unknown) as IClickable).onClickHandler)\r\n            .forEach((x) =>\r\n                ((x as unknown) as IClickable).onClickHandler(this.ctx, point)\r\n            );\r\n    }\r\n}\r\n","import { IDrawable, ISize } from '../Models';\r\n\r\nexport class CommandBar implements IDrawable {\r\n    private readonly barHeight = 100;\r\n    constructor(private canvasSize: ISize) {}\r\n\r\n    draw(ctx: CanvasRenderingContext2D, color?: string): void {\r\n        ctx.fillStyle = 'green';\r\n        ctx.fillRect(0, 0, this.canvasSize.width, this.barHeight);\r\n        this.drawMenuItems();\r\n    }\r\n\r\n    private drawMenuItems(): void {}\r\n}\r\n","import { IDrawable, IClickable, IPoint } from '../../Models';\r\nimport { IButtonParams } from './Models';\r\n\r\nexport class Button implements IDrawable, IClickable {\r\n    private path: Path2D;\r\n    constructor(\r\n        public text: string,\r\n        public onClick: () => void,\r\n        private params: IButtonParams = {\r\n            buttonHeight: 50,\r\n            buttonWidth: 100,\r\n            leftTopX: 1,\r\n            leftTopY: 2,\r\n        }\r\n    ) {}\r\n\r\n    pointInPath(ctx: CanvasRenderingContext2D, point: IPoint): boolean {\r\n        return ctx.isPointInPath(this.path, point.x, point.y);\r\n    }\r\n\r\n    onClickHandler(ctx: CanvasRenderingContext2D, point: IPoint): void {\r\n        if (this.pointInPath(ctx, point)) {\r\n            if (this.onClick) {\r\n                this.onClick();\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D, color = '#A9B665'): void {\r\n        const radgrad = ctx.createRadialGradient(\r\n            this.params.leftTopX + 45,\r\n            this.params.leftTopY + 45,\r\n            10,\r\n            this.params.leftTopX + 52,\r\n            this.params.leftTopY + 50,\r\n            100\r\n        );\r\n        radgrad.addColorStop(0, '#A7D30C');\r\n        radgrad.addColorStop(1, '#019F62');\r\n        ctx.fillStyle = radgrad;\r\n        this.path = new Path2D();\r\n        this.path.rect(\r\n            this.params.leftTopX,\r\n            this.params.leftTopY,\r\n            this.params.buttonWidth,\r\n            this.params.buttonHeight\r\n        );\r\n        ctx.fill(this.path);\r\n        ctx.font = '20px Arial';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillStyle = 'black';\r\n        ctx.fillText(\r\n            this.text,\r\n            this.params.leftTopX + this.params.buttonWidth / 2,\r\n            this.params.leftTopY + this.params.buttonHeight / 2\r\n        );\r\n    }\r\n}\r\n","import { IDrawable, IPoint } from '../Models';\r\nimport { Enemy } from './Enemies/Enemy';\r\n\r\nexport class Projectile implements IDrawable {\r\n    private progress = 0;\r\n    private speed = 0.3;\r\n\r\n    constructor(\r\n        public dmg: number,\r\n        private position: IPoint,\r\n        private target: Enemy\r\n    ) {}\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, color = 'green'): void {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        ctx.arc(this.position.x, this.position.y, 2, 0, 360);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n\r\n    public moveForward(): boolean {\r\n        const targetPosition = this.target.position;\r\n        var dx = targetPosition.x - this.position.x;\r\n        var dy = targetPosition.y - this.position.y;\r\n        var X = this.position.x + dx * this.progress;\r\n        var Y = this.position.y + dy * this.progress;\r\n        this.position = { x: Math.round(X), y: Math.round(Y) };\r\n        this.progress += this.speed;\r\n        return this.progress >= 1;\r\n    }\r\n}\r\n","import { Item } from '../Towers/Towers';\r\nimport { Projectile } from '../Projectile';\r\nimport { Path } from '../Path';\r\nimport { defaultBlockSize } from '../../Constants';\r\nimport { IPoint } from '../../Models';\r\n\r\nexport class Enemy extends Item {\r\n    private progress = 0;\r\n    private _dead = false;\r\n    private _healthPoints = 100;\r\n\r\n    private projectiles: Projectile[] = [];\r\n\r\n    get dead(): boolean {\r\n        return this._dead;\r\n    }\r\n\r\n    get hp(): number {\r\n        return this._healthPoints;\r\n    }\r\n\r\n    constructor(\r\n        private path: Path,\r\n        private moveSpeed = 0.3,\r\n        blockSize = defaultBlockSize,\r\n        color = 'red'\r\n    ) {\r\n        super(path.points[0], blockSize, color);\r\n    }\r\n\r\n    public shootAt(dmg: number, towerPosition: IPoint): void {\r\n        this.projectiles.push(new Projectile(dmg, towerPosition, this));\r\n    }\r\n\r\n    public doDamage(dmg: number): void {\r\n        this._healthPoints -= dmg;\r\n        if (this._healthPoints <= 0) {\r\n            this._dead = true;\r\n        }\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D, color = this.color): void {\r\n        if (this.dead) {\r\n            ctx.fillStyle = 'gray';\r\n        } else {\r\n            ctx.fillStyle = color;\r\n        }\r\n        const rect = new Path2D();\r\n        rect.rect(this.leftTopX, this.leftTopY, this.width, this.height);\r\n        ctx.fill(rect);\r\n        this.projectiles.forEach((x) => x.draw(ctx));\r\n    }\r\n\r\n    public moveForward(): boolean {\r\n        const reachedProjectiles = this.projectiles.filter((x) =>\r\n            x.moveForward()\r\n        );\r\n        if (reachedProjectiles.length > 0) {\r\n            reachedProjectiles.forEach((x) => this.doDamage(x.dmg));\r\n            this.projectiles = this.projectiles.filter(\r\n                (x) => !reachedProjectiles.includes(x)\r\n            );\r\n        }\r\n        if (this.dead) {\r\n            return false;\r\n        }\r\n        const nextPoint = this.path.getPointAtPercent(this.progress);\r\n        if (!nextPoint) {\r\n            return;\r\n        }\r\n        this.moveTo(nextPoint);\r\n        if (this.progress >= 100) {\r\n            return true;\r\n        }\r\n        if (this.progress + this.moveSpeed > 100) {\r\n            this.progress = 100;\r\n            return true;\r\n        }\r\n        this.progress += this.moveSpeed;\r\n        return false;\r\n    }\r\n}\r\n","import { Path } from './Components/Path';\r\nimport { ITower, TowerType } from './Components/Towers/Models';\r\nimport { TowerFactory } from './Components/Towers/Towers';\r\nimport { Canvas } from './Components/Canvas';\r\nimport { CommandBar } from './Components/CommandBar';\r\nimport { Button } from './Components/BasicElements/Button';\r\nimport { Enemy } from './Components/Enemies/Enemy';\r\nimport { IWaveSettings } from './Models';\r\nimport { IButtonParams } from './Components/BasicElements/Models';\r\n\r\nconst defaultPath: Path = new Path([\r\n    {\r\n        x: 10,\r\n        y: 10,\r\n    },\r\n    {\r\n        x: 10,\r\n        y: 300,\r\n    },\r\n    {\r\n        x: 200,\r\n        y: 300,\r\n    },\r\n    {\r\n        x: 300,\r\n        y: 10,\r\n    },\r\n    {\r\n        x: 500,\r\n        y: 10,\r\n    },\r\n    {\r\n        x: 500,\r\n        y: 300,\r\n    },\r\n]);\r\n\r\nconst defaultTowers = [\r\n    TowerFactory.createTower(\r\n        {\r\n            x: 50,\r\n            y: 50,\r\n        },\r\n        TowerType.SpearTower,\r\n        1\r\n    ),\r\n    TowerFactory.createTower(\r\n        {\r\n            x: 100,\r\n            y: 250,\r\n        },\r\n        TowerType.SpearTower,\r\n        1\r\n    ),\r\n];\r\n\r\nexport class TowerDefenseGame {\r\n    private towers: ITower[] = defaultTowers;\r\n    private path: Path = defaultPath;\r\n    private enemies: Enemy[] = [];\r\n    private canvas: Canvas;\r\n    private intervalId?: NodeJS.Timeout;\r\n    private fps = 60;\r\n    private lifes = 7;\r\n    private waves: Map<number, IWaveSettings> = new Map([\r\n        [\r\n            1,\r\n            {\r\n                enemiesColor: 'blue',\r\n                enemiesMoveSpeed: 1,\r\n                enemiesNumber: 3,\r\n                spawnSpeed: 500,\r\n            },\r\n        ],\r\n        [\r\n            2,\r\n            {\r\n                enemiesColor: 'red',\r\n                enemiesMoveSpeed: 0.1,\r\n                enemiesNumber: 20,\r\n                spawnSpeed: 500,\r\n            },\r\n        ],\r\n        [\r\n            3,\r\n            {\r\n                enemiesColor: 'green',\r\n                enemiesMoveSpeed: 0.5,\r\n                enemiesNumber: 10,\r\n                spawnSpeed: 100,\r\n            },\r\n        ],\r\n        [\r\n            4,\r\n            {\r\n                enemiesColor: 'brown',\r\n                enemiesMoveSpeed: 0.5,\r\n                enemiesNumber: 200,\r\n                spawnSpeed: 300,\r\n            },\r\n        ],\r\n    ]);\r\n    private gameIsRunning = false;\r\n\r\n    private bottomRightButton: IButtonParams;\r\n\r\n    constructor(private htmlCanvas: HTMLCanvasElement) {\r\n        this.canvas = new Canvas(htmlCanvas);\r\n        this.bottomRightButton = {\r\n            buttonHeight: 50,\r\n            buttonWidth: 100,\r\n            leftTopX: this.canvas.size.width - 100,\r\n            leftTopY: this.canvas.size.height - 50,\r\n        };\r\n    }\r\n\r\n    public testMode(): void {\r\n        const commandBar = new CommandBar(this.canvas.size);\r\n        this.canvas.add(commandBar);\r\n        this.canvas.update();\r\n    }\r\n\r\n    public initialize(): void {\r\n        this.lifes = 7;\r\n        this.canvas = new Canvas(this.htmlCanvas);\r\n        this.enemies = [];\r\n        this.canvas.add(...this.towers, this.path);\r\n        this.showMainMenu();\r\n    }\r\n\r\n    private showMainMenu(): void {\r\n        const startButton = new Button(\r\n            `Start`,\r\n            () => {\r\n                this.canvas.remove(startButton);\r\n                this.canvas.update();\r\n                this.start();\r\n            },\r\n            this.bottomRightButton\r\n        );\r\n        this.canvas.add(startButton);\r\n        this.canvas.update();\r\n    }\r\n\r\n    private start(): void {\r\n        this.intervalId = setInterval(() => {\r\n            this.run();\r\n        }, 1000 / this.fps);\r\n        this.gameIsRunning = true;\r\n        this.startLevel(1);\r\n    }\r\n\r\n    private async startLevel(level: number): Promise<void> {\r\n        if (this.gameIsRunning) {\r\n            const result = await this.startEnemiesSpawn(level);\r\n            if (result && this.gameIsRunning) {\r\n                if (level < this.waves.size) {\r\n                    const nextLevelButton = new Button(\r\n                        `Start level: ${++level}`,\r\n                        () => {\r\n                            this.canvas.remove(nextLevelButton);\r\n                            this.startLevel(level);\r\n                        },\r\n                        {\r\n                            ...this.bottomRightButton,\r\n                            buttonWidth: 150,\r\n                            leftTopX: this.canvas.size.width - 150,\r\n                        }\r\n                    );\r\n                    this.canvas.add(nextLevelButton);\r\n                } else {\r\n                    const playAgainMenu = new Button(\r\n                        'You won!',\r\n                        () => {\r\n                            this.canvas.remove(playAgainMenu);\r\n                            this.initialize();\r\n                        },\r\n                        this.bottomRightButton\r\n                    );\r\n                    this.canvas.add(playAgainMenu);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async startEnemiesSpawn(level: number): Promise<boolean> {\r\n        console.log('level: ', level);\r\n        let enemiesCounter = 1;\r\n        const levelConfigs = this.waves.get(level);\r\n        const spawnEnemy = () => {\r\n            const newEnemy = new Enemy(\r\n                this.path,\r\n                levelConfigs.enemiesMoveSpeed,\r\n                undefined,\r\n                levelConfigs.enemiesColor\r\n            );\r\n            this.enemies.push(newEnemy);\r\n            this.canvas.add(newEnemy);\r\n        };\r\n        spawnEnemy();\r\n        return new Promise((resolve, reject) => {\r\n            const enemySpawnInterval = setInterval(() => {\r\n                if (enemiesCounter >= levelConfigs.enemiesNumber) {\r\n                    if (enemySpawnInterval) {\r\n                        clearInterval(enemySpawnInterval);\r\n                    }\r\n                    resolve(true);\r\n                    return;\r\n                }\r\n                spawnEnemy();\r\n                enemiesCounter++;\r\n                if (!this.gameIsRunning) {\r\n                    if (enemySpawnInterval) {\r\n                        clearInterval(enemySpawnInterval);\r\n                    }\r\n                    resolve(false);\r\n                }\r\n            }, levelConfigs.spawnSpeed);\r\n        });\r\n    }\r\n\r\n    private run(): void {\r\n        this.enemies.forEach((x) => {\r\n            const reachedFinish = x.moveForward();\r\n            if (reachedFinish) {\r\n                this.lifes--;\r\n                this.enemies = this.enemies.filter((y) => y !== x);\r\n                console.log('lifes: ', this.lifes);\r\n                if (this.lifes <= 0) {\r\n                    this.stop();\r\n                    const gameOverMenu = new Button(\r\n                        'Game over',\r\n                        () => {\r\n                            this.canvas.remove(gameOverMenu);\r\n                            this.initialize();\r\n                        },\r\n                        this.bottomRightButton\r\n                    );\r\n                    this.canvas.add(gameOverMenu);\r\n                }\r\n            }\r\n        });\r\n        this.towers.forEach((x) => x.attack(this.enemies));\r\n        this.canvas.update();\r\n    }\r\n\r\n    private stop(): void {\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n        }\r\n        this.gameIsRunning = false;\r\n    }\r\n}\r\n","import { IDrawable, IPoint } from '../Models';\r\n\r\nexport class Path implements IDrawable {\r\n    private percentPathMap = new Map<{ start: number; end: number }, number>();\r\n    private length = 0;\r\n\r\n    constructor(public points: IPoint[], public color = 'gray') {\r\n        this.calculateSections();\r\n    }\r\n\r\n    private calculateSections(): void {\r\n        for (let index = 1; index < this.points.length; index++) {\r\n            const point = this.points[index];\r\n            const prevPoint = this.points[index - 1];\r\n            const start = this.length;\r\n            this.length += Math.abs(\r\n                prevPoint.x - point.x + (prevPoint.y - point.y)\r\n            );\r\n            this.percentPathMap.set(\r\n                {\r\n                    start,\r\n                    end: this.length,\r\n                },\r\n                index\r\n            );\r\n        }\r\n    }\r\n\r\n    public getPointAtPercent(percent: number): IPoint {\r\n        const step = (this.length / 100) * percent;\r\n        const sections = [...this.percentPathMap.keys()];\r\n        const sectionKey = sections.find(\r\n            ({ start, end }) => step >= start && step <= end\r\n        );\r\n        const section = this.percentPathMap.get(sectionKey);\r\n        if (!section) {\r\n            return null;\r\n        }\r\n        const sectionPercent =\r\n            (step - sectionKey.start) /\r\n            ((sectionKey.end - sectionKey.start) / 100) /\r\n            100;\r\n        const point = this.points[section];\r\n        const prevPoint = this.points[section - 1];\r\n        var dx = point.x - prevPoint.x;\r\n        var dy = point.y - prevPoint.y;\r\n        var X = prevPoint.x + dx * sectionPercent;\r\n        var Y = prevPoint.y + dy * sectionPercent;\r\n        return { x: Math.round(X), y: Math.round(Y) };\r\n    }\r\n\r\n    public draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.save();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.setLineDash([5, 15]);\r\n        ctx.lineCap = 'round';\r\n        for (let index = 0; index < this.points.length; index++) {\r\n            const point = this.points[index];\r\n            if (index === 0) {\r\n                ctx.moveTo(point.x, point.y);\r\n            } else {\r\n                ctx.lineTo(point.x, point.y);\r\n            }\r\n        }\r\n        ctx.stroke();\r\n        ctx.restore();\r\n        this.drawStartEnd(ctx);\r\n    }\r\n\r\n    private drawStartEnd(ctx: CanvasRenderingContext2D): void {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = 'orange';\r\n        ctx.arc(this.points[0].x, this.points[0].y, 10, 0, 360);\r\n        ctx.arc(\r\n            this.points[this.points.length - 1].x,\r\n            this.points[this.points.length - 1].y,\r\n            10,\r\n            0,\r\n            360\r\n        );\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n}\r\n","import './styles/index.scss';\nimport { TowerDefenseGame } from './game/Game';\nimport { ElelementsIds } from './game/Constants';\n\nconst gameCanvas: HTMLCanvasElement = document.getElementById(\n    ElelementsIds.canvasId\n) as HTMLCanvasElement;\n\nconst tdGame = new TowerDefenseGame(gameCanvas);\ntdGame.initialize();\n// tdGame.testMode();\n\nconst toggleLogsButton = document.getElementById(\n    ElelementsIds.toggleLogsButtonId\n);\n\ntoggleLogsButton?.addEventListener('click', () => {\n    const logsEl = document.getElementById(ElelementsIds.logsElId);\n    logsEl.toggleAttribute('hidden');\n});\n"],"sourceRoot":""}